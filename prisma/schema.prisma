datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}
model User {
  id             String   @id @default(uuid())
  name           String?
  email          String?  @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  chats          Chat[]
  Authenticator Authenticator[]
  freeChatCount  Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model UserApiKey {
  id        String   @id @default(uuid())
  userId    String   @unique
  apiKey    String   // Store encrypted!
  provider  String   // e.g. "openai", "anthropic", etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Chat {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  Message[]
  is_deleted Boolean  @default(false)
  shareToken String?  @unique
}

model Message {
  id         String   @id @default(uuid())
  content    String
  role       String   // 'user' | 'assistant'
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     String
  createdAt  DateTime @default(now())
  modelUsed  String
  files      File[]   // Relation to uploaded files
}

model File {
  id        String   @id @default(uuid())
  url       String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
}
